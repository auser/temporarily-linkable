require File.dirname(__FILE__) + '/../spec_helper'

describe TemporaryLink do
  before(:each) do
    @temporarylink = TemporaryLink.new :temporarylinkable_id => 1, :temporarylinkable_type => "User"
  end

  it "should be valid" do
    @temporarylink.should be_valid
  end
end
describe TemporaryLink, "when being generated by a user wanting to change their password" do
  fixtures :users
 before(:each) do
  @temporarylink = TemporaryLink.new :temporarylinkable_id => 1, :temporarylinkable_type => "User"
  @user = User.find(1)
 end
 it "should generate a temporary_link when generated" do
   @temporarylink.save
   @temporarylink.token.should_not be_nil
 end
end
describe TemporaryLink, "in general" do
  fixtures :users
  include TemporaryLinkSpecHelper
  before(:each) do
    @user = User.create!(:id => 2, :email => "test@mojobaby.com", :username => "userdude")
    @temporary_link = TemporaryLink.new
  end
  it "should be valid with a temporarylinkable" do
    @temporary_link.attributes = valid_attributes
    @temporary_link.should be_valid
  end
  it "should be able to set the polymorphic object on itself, in this case" do
    @temporary_link.user = @user
    @temporary_link.save!
    @temporary_link.should be_valid
  end
end
describe TemporaryLink, "when being saved" do
  include TemporaryLinkSpecHelper
  before(:each) do
    @temporary_link = TemporaryLink.new valid_attributes
  end
  it "should generate a temporary_link" do
    @temporary_link.save
    @temporary_link.token.should_not be_nil
  end
  it "should created a generic time to live" do
    @temporary_link.ttl.should_not be_nil
  end
  it "should create an expiration date of default 1 week" do
    @temporary_link.save
    @temporary_link.expires_at.should_not be_nil
    # Just to adjust for the clock/running performance
    ((Time.now + 1.week - 1.minute)..(Time.now + 1.week + 1.minute)).include?(@temporary_link.expires_at).should == true
  end
  it "should be able to set the expiration date to say a day" do
    @temporary_link.ttl = 1.day
    @temporary_link.save
    ((Time.now + 1.day - 1.minute)..(Time.now + 1.day + 1.minute)).include?(@temporary_link.expires_at).should == true
  end
end
describe TemporaryLink, "when retrieved" do
  include TemporaryLinkSpecHelper
  before(:each) do
    @temporary_link = TemporaryLink.create valid_attributes
  end
  it "should be able to tell that it has not expired yet" do
    @temporary_link.expired?.should == false
  end
  it "should be able to tell that is has expired when the expiration date has been set past the time retrieved" do
    @temporary_link.ttl = 1.second
    @temporary_link.save
    sleep(1)
    @temporary_link.expired?.should == true
  end
  it "should be able to be found based off the token code" do
    TemporaryLink.find_by_token(@temporary_link.token).should_not be_nil
    TemporaryLink.find_by_token(@temporary_link.token).should == @temporary_link
  end
  it "should set itself as updated when saved again so that it can only be used once" do
    @temporary_link.save!
    @temporary_link.expired?.should == true
  end
end